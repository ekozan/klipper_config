# Simple sample configuration for getting started with a ToolChanger with 2 tools.


# Enables saving of variables between powerdown of machine. Must be configured before [toollock].
[save_variables]
filename:  ~/variables.cfg

[toollock]
tool_lock_gcode:
	  SAVE_GCODE_STATE NAME=tool_unlock_state                                         # Save gcode state
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=0.90 HOLD_CURRENT=0.7
    MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=0                                 # Set assumed possition as rotated to min
    MANUAL_STEPPER STEPPER=tool_lock Move=10 SPEED=30 STOP_ON_ENDSTOP=-1 SYNC=1      # Move until no longer endstop is triggered, max 1degree. If Endstop is not untriggered then raise an error. Wait for the movement before continuing.
    MANUAL_STEPPER STEPPER=tool_lock Move=150 SPEED=50 STOP_ON_ENDSTOP=1 SYNC=1     # Move to max and stop on endstop. If Endstop is not triggered then raise an error. Wait for the movement before continuing.
	  M400
    MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=0                                 # Set manual extruder position as 0
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=0.7
    RESTORE_GCODE_STATE NAME=tool_unlock_state MOVE=0                               # Restore gcode state
    M117 "Unknown tool Loaded"   

tool_unlock_gcode:
    SAVE_GCODE_STATE NAME=tool_lock_state 
	  SET_TMC_CURRENT STEPPER=tool_lock CURRENT=0.90 HOLD_CURRENT=0.5
    MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=180                               # Set assumed possition as rotated to max
    MANUAL_STEPPER STEPPER=tool_lock Move=179 SPEED=30 STOP_ON_ENDSTOP=-1 SYNC=1    # Move until no longer endstop is triggered, max 1degree. If Endstop is not untriggered then raise an error. Wait for the movement before continuing.
    MANUAL_STEPPER STEPPER=tool_lock Move=0 SPEED=100 STOP_ON_ENDSTOP=1 SYNC=1      # Move to min and stop on endstop. If Endstop is not triggered then raise an error. Wait for the movement before continuing.
    M400
    SET_TMC_CURRENT STEPPER=tool_lock CURRENT=0.5
    MANUAL_STEPPER STEPPER=tool_lock SET_POSITION=0                                 # Set manual extruder position as 0
    MANUAL_STEPPER STEPPER=tool_lock ENABLE=0                                       # Turn off the stepper while unlocked so it can rest without triggering the endswitch
    RESTORE_GCODE_STATE NAME=tool_lock_state MOVE=0                                   # Restore gcode state
    M117 Tool Unloaded                                                              # Turn off the stepper while unlocked so it can rest without triggering the endswitch

[toolgroup 0]
is_virtual: False            # If True then must have a physical_parent declared and shares extruder, hotend and fan with the physical_parent
pickup_gcode: 
  SUB_TOOL_PICKUP_START T={myself.name}
  SUB_TOOL_PICKUP_END T={myself.name}
dropoff_gcode:
  SUB_TOOL_DROPOFF_START T={myself.name}
  SUB_TOOL_DROPOFF_END T={myself.name}

[tool 0]
tool_group: 0
extruder: extruder
fan: toolfan1
zone: 40,190
park: 40,231
offset: 0,-34,22.70  #x,y,z  #0.4 => Z:14.44  #0.6 rapido => Z:22.80 
meltzonelength: 18

#On drive E0

## Drivers
# | Drive |  DIR pin |  STEP pin |  ENDSTOP pin |  SPI EN pin |
# |-------|----------|-----------|--------------|-------------|
# | E0    |  PA1     |  PD5      |  PD10        |  PC17       |
# **enable pin for all steppers** is TMC_EN = !PC6.

## Fans
# | FAN  |          PIN          |
# |------|-----------------------|
# | FAN0 |  PC23                 |

[extruder]
step_pin: PD5
dir_pin: PA1
enable_pin: !PC6
microsteps: 16
full_steps_per_rotation: 200
rotation_distance: 4.637
nozzle_diameter: 0.400 #set your nozzle diameter
filament_diameter: 1.750
max_extrude_only_distance: 500
max_extrude_only_velocity: 120
pressure_advance: 0.068 
pressure_advance_smooth_time: 0.03 #to be calibrated
heater_pin: !PA20 #HEATER1
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: PC15 #THERMISTOR1
control: pid
pid_Kp=24.484 
pid_Ki=2.511 
pid_Kd=59.680
min_temp: 0
max_temp: 290

[tmc2660 extruder]
cs_pin: PC17
spi_bus: usart1
interpolate: true
run_current: 0.85
idle_current_percent: 50
sense_resistor: 0.051
driver_TBL: 0
driver_HEND: 6
driver_HSTRT: 7
driver_TOFF: 4

[heater_fan fan1]
pin: PC23 #FAN0
heater: extruder

[fan_generic toolfan1]
pin: rpi:gpio26 #FAN0
max_power: 1
cycle_time: 0.005
hardware_pwm: false
shutdown_speed:0


# [tool 1]
# tool_group: 0
# extruder: extruder1
# fan: partfan_t1
# zone: 550,100
# park: 598,100
# offset: -1.447,-0.295,-1.503
# meltzonelength: 18




[gcode_macro SUB_TOOL_PICKUP_START]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:
  {%set myself = printer['tool '~params.T]%}

  M568 P{myself.name} A2                                               # Put tool heater in Active mode

  SAVE_ACCELERATION                                                    # Save current acceleration value.
  M204 S8000                                                           # Set high acceleration for toolchanging

  SAVE_GCODE_STATE NAME=TOOL_PICKUP                                    # Save GCODE state. Will be restored at the end of SUB_TOOL_PICKUP_END
  #SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=0         # Don't use the X-max endstop as EmergencyStop.
  G90

  ##############  Move in to zone  ##############
  {% if printer.toolhead.position.y < 190 %}                           # If Printer inside safezone:
    G0 X{myself.zone[0]} Y190 F40000                                     # Fast move XY inside the safezone.
  {% else %}                                                           # Else, outside of safezone:
    G0 Y190 F40000                                                       # Fast move X inside the safezone, so we don't crash into other tools.
    G0 X{myself.zone[0]} F40000                                          # Fast move Y in front of parking spot.
  {% endif %}                                                          # /

  ##############  Move in to parking spot  ##############
  G0 Y{myself.park[1]|int - 15}  F40000                                # Fast Move near the pickup position for tool.
  G0 Y{myself.park[1]} F3000                                           # Slow Move to the pickup position for tool.

  ##############  Lock Tool  ##############
  M400                                                                 # Wait for all moves to finish.
  TOOL_LOCK                                                            # Lock the tool.
  SET_GCODE_OFFSET Z={myself.offset[2]} MOVE=1                         # Set and move the Z offset. Avoid crashing into bed when moving out later.

  ##############  Wait for heater  ##############
  {% if myself.extruder|default("none")|lower !="none" %}              # If the tool has an extruder:
    M116 P{myself.name}                                                  # Wait for tool to reach target temperature.
  {% endif %}                                                          # /

  ##############  Move out to zone  ##############
  G0 Y{myself.zone[1]} F6000                                           # Slow Move to the zone position for tool.

[gcode_macro SUB_TOOL_PICKUP_END]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:
  {%set myself = printer['tool '~params.T]%}
    ##############  Move out to Safe position  ##############
  G0 Y190 F40000                                                       # Fast Move to the safe position for tools.

    ##############  Check Tool Lock  ##############
  QUERY_ENDSTOPS                                                       # Check the endstops and save the state to be retrieved in the macro below.
  TOOL_LOCK_CHECK                                                      # MAcro to check so the tool is mounted by slightly advancing the lock again until hit endstop, only if endstop not already hit. Do not wait for it to finish.

    ##############  Finnish up  ##############
  M400                                                                 # Wait for current moves to finish.
  #SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=1         # Use the X max as EmergencyStop.
  RESTORE_GCODE_STATE NAME=TOOL_PICKUP MOVE=0                          # Restore GCODE state. Was saved at thebegining of SUB_TOOL_PICKUP_START. Move fast to last location.
                                                                       # Set the toolhead offsets. Z is set and moved before any moves in SUB_TOOL_PICKUP_START. Needs to be after any RESTORE_GCODE_STATE!
  SET_GCODE_OFFSET X={myself.offset[0]} Y={myself.offset[1]} Z={myself.offset[2]} MOVE=0  # Set X and Y offsets, 

    ##############  Return to saved position  ##############
  G1 F40000
  RESTORE_POSITION

  SAVE_GCODE_STATE NAME=TOOL_PICKUP2                            # Save state for priming nozzle
#  RESPOND MSG="First if:{myself.extruder|default("none")|lower}"

    ##############  Prime the filament, asume it was retracted as per e3d Revo documentation  ##############
  {% if myself.extruder|default("none")|lower !="none" %}       # If the tool has an extruder:
#    RESPOND MSG="First if1:{myself.extruder|default("none")|lower}"
#    RESPOND MSG="Second if:{printer[myself.extruder].can_extrude|default("false")|lower}"
#    RESPOND MSG="Second if1:{printer.toollock.purge_on_toolchange}"
                                                                  # If can extrude and global purge is active:
    {% if printer[myself.extruder].can_extrude|default("false")|lower == 'true' and printer.toollock.purge_on_toolchange %}
#      RESPOND MSG="Second if2:{printer[myself.extruder].can_extrude|default("false")|lower}"
#      RESPOND MSG="Second if3:{printer.toollock.purge_on_toolchange}"
      M83                                                           # Relative extrusion
      G1 E{myself.meltzonelength|int - 2} F1300                     # DeRetract filament from meltzone
      G1 E2 F400                                                    # DeRetract filament from meltzone
    {% endif %}
  {% endif %}
  RESTORE_GCODE_STATE NAME=TOOL_PICKUP2                          # Restore state after priming nozzle
  G1 F30000
  RESTORE_ACCELERATION                                           # Restore saved acceleration value.



[gcode_macro SUB_TOOL_DROPOFF_START]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:
  {%set myself = printer['tool '~params.T]%}

  SAVE_ACCELERATION                                            # Save current acceleration value.
  M204 S8000                                                   # Set high acceleration for toolchanging

  {% if myself.name|int != printer.toollock.tool_current|int %}
    { action_raise_error("SUB_TOOL_DROPOFF_START: Wrong tool. Asked to dropoff T" ~ myself.name ~ " while current is T" ~ printer.toollock.tool_current ~ ".") }
  {% endif %}

    ##############  Retract the filament as per e3d Revo documentation  ##############
  {% if myself.extruder|default("none")|lower !="none" %}       # If the tool has an extruder:
    M568 P{myself.name} A1                                        # Put tool heater in standby

    {% if printer[myself.extruder].can_extrude|default("false")|lower == 'true' and printer.toollock.purge_on_toolchange %}
      M83                                                           # Relative extrusion
      G1 E-4 F2700                                                  # retract filament from meltzone
      G1 E2 F800                                                    # Extrude slightly to form a tip
      G1 E-{myself.meltzonelength|int - 2} F800                     # Retract filament from meltzone
    {% endif %}
  {% endif %}

  SET_GCODE_OFFSET X=0 Y=0                                      # Set XY offset to 0 so we park the tool right.
  SAVE_GCODE_STATE NAME=TOOL_DROPOFF_002                        # Save GCode state.
  G90                                                           # Absolute positions

  #SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=0 # Don't use the X max as EmergencyStop.

  # Fast Move to the general pickup position for tools.
  {% if printer.toolhead.position.y|int < 190 %}
    G0 Y190 X{myself.zone[0]} F40000  # Move near pickup and lift z so we don't crash the bed later.
  {% else %}
    G0 Y190 F40000                  # Move X and lift z so we don't crash the bed or into other tools.
    G0 X{myself.zone[0]} F40000            # Move Y after X and Z
  {% endif %}
  M400                                # Wait for current moves to finish

  G0 Y{myself.zone[1]} F40000              # Fast Move near the dropoff position for tool.
  G0 Y{myself.park[1]} F3000               # Slow Move to the dropoff position for tool.


[gcode_macro SUB_TOOL_DROPOFF_END]
description: Internal subroutine. Do not use!
# Tnnn: Tool to pickup
gcode:
  {%set myself = printer['tool '~params.T]%}

  M400                                # Wait for current moves to finish
  TOOL_UNLOCK                         # Unlock the tool

  G0 Y{myself.park[1]|int - 15} F6000     # Slow Move to the pickup position for tool.
  G0 Y190 F40000                           # Fast Move to the general pickup position for tools.
  M400

  #SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=1 # Use the X max as EmergencyStop.
  RESTORE_GCODE_STATE NAME=TOOL_DROPOFF_002 MOVE=0   # Restore Gcode state
  RESTORE_ACCELERATION                # Restore saved acceleration value.